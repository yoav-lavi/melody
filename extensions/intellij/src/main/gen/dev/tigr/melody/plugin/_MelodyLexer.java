/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.tigr.melody.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.tigr.melody.plugin.psi.MelodyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Melody.flex</tt>
 */
public class _MelodyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\11\1\6\4\11\1\7\2\0\1\5\3\0\1\13\1\4\12\3\1\45\1"+
    "\52\1\40\1\51\1\41\1\0\1\11\32\12\1\0\1\11\1\0\1\11\1\46\1\10\1\20\1\35\1"+
    "\17\1\34\1\24\1\15\1\43\1\27\1\31\1\12\1\44\1\36\1\26\1\32\1\14\1\21\1\12"+
    "\1\23\1\25\1\16\1\22\1\30\1\42\1\12\1\33\1\37\1\47\1\0\1\50\7\0\1\1\32\0\1"+
    "\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\3\1\1\4"+
    "\1\1\12\4\1\1\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\2\0\1\13\2\0\1\14\1\15\2\11\1\16"+
    "\12\11\16\0\4\11\1\17\3\11\1\20\2\11\1\21"+
    "\22\0\1\12\1\11\1\22\3\11\1\23\2\11\1\24"+
    "\21\0\1\12\1\0\2\11\1\25\1\11\1\26\1\11"+
    "\1\0\1\27\4\0\1\30\13\0\1\31\1\11\1\32"+
    "\1\33\1\34\1\0\1\35\5\0\1\36\4\0\1\37"+
    "\1\0\1\40\4\0\1\41\1\42\2\0\1\43\6\0"+
    "\1\44\11\0\1\45\6\0\1\46\1\47\5\0\1\50"+
    "\17\0\1\51\1\52\74\0\1\53\66\0\1\54\10\0"+
    "\1\55\44\0\1\56\21\0\1\57\4\0\1\60\3\0"+
    "\1\61\11\0\1\62\110\0\1\63\1\64\31\0\1\65"+
    "\31\0\1\66\1\67\6\0\1\70\10\0\1\71\1\72"+
    "\1\73\4\0\1\74\43\0\1\75\12\0\1\76\11\0"+
    "\1\77\5\0\1\100\3\0\1\101\1\0\1\102\1\103"+
    "\6\0\1\104\1\0\1\105\3\0\1\106\2\0\1\107"+
    "\1\110\1\0\1\111\1\112\1\113\1\0\1\114\12\0"+
    "\1\115\1\0\1\116\3\0\1\117\1\120\1\0\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\53\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\53\0\53"+
    "\0\53\0\53\0\u0158\0\u0387\0\u03b2\0\327\0\53\0\u0102"+
    "\0\u012d\0\u0183\0\u0158\0\u03dd\0\u0408\0\u0158\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u0158\0\u08e7\0\u0912\0\u093d\0\u0158\0\u0968"+
    "\0\u0993\0\u0158\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95"+
    "\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0158\0\u0d1a"+
    "\0\u0d45\0\u0d70\0\u0158\0\u0d9b\0\u0dc6\0\u0158\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u07e5"+
    "\0\u10cc\0\u10f7\0\u1122\0\u0158\0\u114d\0\u0158\0\u1178\0\u11a3"+
    "\0\53\0\u11ce\0\u11f9\0\u1224\0\u124f\0\53\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd"+
    "\0\u0cc4\0\u0158\0\u1428\0\u0158\0\u0158\0\53\0\u1453\0\53"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\53\0\u1555\0\u1580"+
    "\0\u15ab\0\u15d6\0\53\0\u1601\0\u0158\0\u162c\0\u1657\0\u1682"+
    "\0\u16ad\0\53\0\53\0\u16d8\0\u1703\0\53\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\53\0\u1830\0\u185b\0\u1886"+
    "\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\53\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\53\0\53\0\u1ab5"+
    "\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\53\0\u1b8c\0\u1bb7\0\u1be2"+
    "\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a"+
    "\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\53\0\53\0\u1e11\0\u1e3c"+
    "\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94"+
    "\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec"+
    "\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244"+
    "\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346\0\u2371\0\u239c"+
    "\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4"+
    "\0\u251f\0\u254a\0\u2575\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u264c"+
    "\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723\0\u274e\0\u2779\0\u27a4"+
    "\0\u27cf\0\u27fa\0\53\0\u2825\0\u2850\0\u287b\0\u28a6\0\u28d1"+
    "\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29"+
    "\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\u2b81"+
    "\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u2cae\0\u2cd9"+
    "\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb\0\u2e06\0\u2e31"+
    "\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89"+
    "\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060\0\u308b\0\u30b6\0\u30e1"+
    "\0\u310c\0\53\0\u3137\0\u3162\0\u318d\0\u31b8\0\u31e3\0\u320e"+
    "\0\u3239\0\u3264\0\53\0\u328f\0\u32ba\0\u32e5\0\u3310\0\u333b"+
    "\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468\0\u3493"+
    "\0\u34be\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0\0\u35eb"+
    "\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718\0\u3743"+
    "\0\u376e\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870\0\53"+
    "\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d\0\u39c8"+
    "\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20"+
    "\0\u3b4b\0\53\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\53\0\u3c22"+
    "\0\u3c4d\0\u3c78\0\53\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f"+
    "\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb\0\53\0\u3e26\0\u3e51\0\u3e7c"+
    "\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4"+
    "\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6\0\u4101\0\u412c"+
    "\0\u4157\0\u4182\0\u41ad\0\u41d8\0\u4203\0\u422e\0\u4259\0\u4284"+
    "\0\u42af\0\u42da\0\u4305\0\u4330\0\u435b\0\u4386\0\u43b1\0\u43dc"+
    "\0\u4407\0\u4432\0\u445d\0\u4488\0\u44b3\0\u44de\0\u4509\0\u4534"+
    "\0\u455f\0\u458a\0\u45b5\0\u45e0\0\u460b\0\u4636\0\u4661\0\u468c"+
    "\0\u46b7\0\u46e2\0\u470d\0\u4738\0\u4763\0\u478e\0\u47b9\0\u47e4"+
    "\0\u480f\0\u483a\0\u4865\0\u4890\0\u48bb\0\u48e6\0\u4911\0\u493c"+
    "\0\u4967\0\u4992\0\u49bd\0\u49e8\0\u4a13\0\53\0\53\0\u4a3e"+
    "\0\u4a69\0\u4a94\0\u4abf\0\u4aea\0\u4b15\0\u4b40\0\u4b6b\0\u4b96"+
    "\0\u4bc1\0\u4bec\0\u4c17\0\u4c42\0\u4c6d\0\u4c98\0\u4cc3\0\u4cee"+
    "\0\u4d19\0\u4d44\0\u4d6f\0\u4d9a\0\u4dc5\0\u4df0\0\u4e1b\0\u4e46"+
    "\0\53\0\u4e71\0\u4e9c\0\u4ec7\0\u4ef2\0\u4f1d\0\u4f48\0\u4f73"+
    "\0\u4f9e\0\u4fc9\0\u4ff4\0\u501f\0\u504a\0\u5075\0\u50a0\0\u50cb"+
    "\0\u50f6\0\u5121\0\u514c\0\u5177\0\u51a2\0\u51cd\0\u51f8\0\u5223"+
    "\0\u524e\0\u5279\0\53\0\53\0\u52a4\0\u52cf\0\u52fa\0\u5325"+
    "\0\u5350\0\u537b\0\53\0\u53a6\0\u53d1\0\u53fc\0\u5427\0\u5452"+
    "\0\u547d\0\u54a8\0\u54d3\0\53\0\53\0\53\0\u54fe\0\u5529"+
    "\0\u5554\0\u557f\0\53\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656"+
    "\0\u5681\0\u56ac\0\u56d7\0\u5702\0\u572d\0\u5758\0\u5783\0\u57ae"+
    "\0\u57d9\0\u5804\0\u582f\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906"+
    "\0\u5931\0\u595c\0\u5987\0\u59b2\0\u59dd\0\u5a08\0\u5a33\0\u5a5e"+
    "\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a\0\u5b35\0\u5b60\0\53\0\u5b8b"+
    "\0\u5bb6\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u5cb8\0\u5ce3"+
    "\0\u5d0e\0\53\0\u5d39\0\u5d64\0\u5d8f\0\u5dba\0\u5de5\0\u5e10"+
    "\0\u5e3b\0\u5e66\0\u5e91\0\53\0\u5ebc\0\u5ee7\0\u5f12\0\u5f3d"+
    "\0\u5f68\0\53\0\u5f93\0\u5fbe\0\u5fe9\0\53\0\u6014\0\53"+
    "\0\53\0\u603f\0\u606a\0\u6095\0\u60c0\0\u60eb\0\u6116\0\53"+
    "\0\u6141\0\53\0\u616c\0\u6197\0\u61c2\0\53\0\u61ed\0\u6218"+
    "\0\53\0\53\0\u6243\0\53\0\53\0\53\0\u626e\0\53"+
    "\0\u6299\0\u62c4\0\u62ef\0\u631a\0\u6345\0\u6370\0\u639b\0\u63c6"+
    "\0\u63f1\0\u641c\0\53\0\u6447\0\53\0\u6472\0\u649d\0\u64c8"+
    "\0\53\0\53\0\u64f3\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\6\1\12\1\13\1\14\1\12\1\15\1\16\1\17"+
    "\3\12\1\20\1\21\1\22\3\12\1\23\2\12\1\24"+
    "\1\25\1\12\1\26\1\2\3\12\1\2\1\12\1\27"+
    "\1\30\1\31\1\32\54\0\2\3\53\0\1\4\6\0"+
    "\1\33\1\0\24\33\2\0\3\33\1\0\1\33\10\0"+
    "\1\34\1\35\45\0\6\36\1\37\44\36\7\40\1\37"+
    "\43\40\10\41\1\37\42\41\3\0\1\33\6\0\1\33"+
    "\1\0\24\33\2\0\3\33\1\0\1\33\7\0\1\42"+
    "\6\0\1\42\1\0\24\42\2\0\3\42\1\0\1\42"+
    "\7\0\1\33\6\0\1\33\1\0\1\33\1\43\3\33"+
    "\1\44\6\33\1\45\7\33\2\0\3\33\1\0\1\33"+
    "\7\0\1\33\6\0\1\33\1\0\1\46\23\33\2\0"+
    "\3\33\1\0\1\33\7\0\1\33\6\0\1\33\1\0"+
    "\4\33\1\47\17\33\2\0\3\33\1\0\1\33\7\0"+
    "\1\33\6\0\1\33\1\0\13\33\1\50\2\33\1\51"+
    "\5\33\2\0\3\33\1\0\1\33\7\0\1\33\6\0"+
    "\1\33\1\0\15\33\1\52\6\33\2\0\3\33\1\0"+
    "\1\33\7\0\1\33\6\0\1\33\1\0\1\53\23\33"+
    "\2\0\3\33\1\0\1\33\7\0\1\33\6\0\1\33"+
    "\1\0\4\33\1\54\17\33\2\0\3\33\1\0\1\33"+
    "\7\0\1\33\6\0\1\33\1\0\1\55\23\33\2\0"+
    "\3\33\1\0\1\33\7\0\1\33\6\0\1\33\1\0"+
    "\10\33\1\56\13\33\2\0\3\33\1\0\1\33\7\0"+
    "\1\33\6\0\1\33\1\0\4\33\1\57\3\33\1\60"+
    "\13\33\2\0\3\33\1\0\1\33\21\0\1\61\1\62"+
    "\1\63\1\64\2\0\1\65\1\66\1\67\2\0\1\70"+
    "\1\0\1\71\1\0\1\72\1\73\4\0\1\74\10\0"+
    "\1\34\1\0\51\34\5\75\1\76\45\75\3\0\1\33"+
    "\6\0\1\33\1\0\2\33\1\77\21\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\10\33"+
    "\1\100\13\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\5\33\1\101\16\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\10\33"+
    "\1\102\13\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\17\33\1\103\4\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\2\33"+
    "\1\104\21\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\12\33\1\105\11\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\2\33"+
    "\1\106\21\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\2\33\1\107\21\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\13\33"+
    "\1\110\10\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\23\33\1\111\2\0\3\33\1\0"+
    "\1\33\7\0\1\33\6\0\1\33\1\0\2\33\1\112"+
    "\21\33\2\0\3\33\1\0\1\33\30\0\1\113\46\0"+
    "\1\114\52\0\1\115\6\0\1\116\61\0\1\117\40\0"+
    "\1\120\60\0\1\121\36\0\1\122\2\0\1\123\55\0"+
    "\1\124\50\0\1\125\1\0\1\126\57\0\1\127\35\0"+
    "\1\130\3\0\1\131\46\0\1\132\12\0\1\133\23\0"+
    "\5\75\1\134\51\75\1\135\1\134\45\75\3\0\1\33"+
    "\6\0\1\33\1\0\15\33\1\136\6\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\7\33"+
    "\1\137\14\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\2\33\1\140\21\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\4\33"+
    "\1\141\17\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\13\33\1\142\10\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\10\33"+
    "\1\143\13\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\3\33\1\144\20\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\15\33"+
    "\1\145\6\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\17\33\1\146\4\33\2\0\3\33"+
    "\1\0\1\33\30\0\1\147\63\0\1\150\33\0\1\151"+
    "\54\0\1\152\53\0\1\153\47\0\1\154\70\0\1\155"+
    "\36\0\1\156\52\0\1\157\55\0\1\160\65\0\1\161"+
    "\56\0\1\162\53\0\1\163\31\0\1\164\47\0\1\165"+
    "\56\0\1\166\60\0\1\167\21\0\4\75\1\170\1\134"+
    "\52\75\1\171\45\75\3\0\1\33\6\0\1\33\1\0"+
    "\1\172\23\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\6\33\1\173\15\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\20\33"+
    "\1\174\3\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\10\33\1\175\13\33\2\0\3\33"+
    "\1\0\1\33\7\0\1\33\6\0\1\33\1\0\13\33"+
    "\1\176\10\33\2\0\3\33\1\0\1\33\7\0\1\33"+
    "\6\0\1\33\1\0\16\33\1\177\5\33\2\0\3\33"+
    "\1\0\1\33\40\0\1\200\57\0\1\201\35\0\1\202"+
    "\51\0\1\203\56\0\1\204\45\0\1\205\71\0\1\206"+
    "\34\0\1\207\46\0\1\210\51\0\1\211\72\0\1\212"+
    "\52\0\1\213\45\0\1\214\53\0\1\215\64\0\1\216"+
    "\42\0\1\217\34\0\1\220\34\0\4\75\1\221\1\134"+
    "\45\75\3\0\1\33\6\0\1\33\1\0\16\33\1\222"+
    "\5\33\2\0\3\33\1\0\1\33\7\0\1\33\6\0"+
    "\1\33\1\0\7\33\1\223\14\33\2\0\3\33\1\0"+
    "\1\33\7\0\1\33\6\0\1\33\1\0\7\33\1\224"+
    "\14\33\2\0\3\33\1\0\1\33\7\0\1\33\6\0"+
    "\1\33\1\0\20\33\1\225\3\33\2\0\3\33\1\0"+
    "\1\33\45\0\1\226\54\0\1\227\50\0\1\230\31\0"+
    "\1\231\55\0\1\232\45\0\1\233\60\0\1\234\57\0"+
    "\1\235\62\0\1\236\42\0\1\237\37\0\1\240\70\0"+
    "\1\241\43\0\1\242\66\0\1\243\35\0\1\244\31\0"+
    "\1\33\6\0\1\33\1\0\10\33\1\245\13\33\2\0"+
    "\3\33\1\0\1\33\20\0\1\246\70\0\1\247\2\0"+
    "\1\250\47\0\1\251\61\0\1\252\52\0\1\253\30\0"+
    "\1\254\65\0\1\255\61\0\1\256\31\0\1\257\53\0"+
    "\1\260\56\0\1\261\50\0\1\262\51\0\1\263\54\0"+
    "\1\264\67\0\1\265\31\0\1\266\56\0\1\267\51\0"+
    "\1\270\47\0\1\271\53\0\1\272\64\0\1\273\45\0"+
    "\1\274\42\0\1\275\72\0\1\276\55\0\1\277\44\0"+
    "\1\300\36\0\1\301\53\0\1\302\77\0\1\303\31\0"+
    "\1\304\57\0\1\305\62\0\1\306\52\0\1\307\35\0"+
    "\1\310\45\0\1\311\100\0\1\312\30\0\1\313\46\0"+
    "\1\314\74\0\1\315\35\0\1\316\42\0\1\317\1\320"+
    "\1\321\1\322\1\0\1\323\1\324\1\0\1\325\1\326"+
    "\1\327\2\0\1\330\1\331\1\0\1\332\1\0\1\333"+
    "\45\0\1\334\62\0\1\335\52\0\1\336\27\0\1\337"+
    "\2\0\1\340\45\0\1\341\14\0\1\342\52\0\1\343"+
    "\35\0\1\344\3\0\1\345\1\0\1\346\13\0\1\347"+
    "\34\0\1\350\1\0\1\351\1\352\50\0\1\353\10\0"+
    "\1\354\52\0\1\355\41\0\1\356\1\357\1\0\1\360"+
    "\6\0\1\361\33\0\1\362\3\0\1\363\64\0\1\364"+
    "\34\0\1\365\5\0\1\366\50\0\1\367\3\0\1\370"+
    "\42\0\1\371\7\0\1\372\4\0\1\373\40\0\1\374"+
    "\62\0\1\375\47\0\1\376\51\0\1\377\61\0\1\u0100"+
    "\36\0\1\u0101\66\0\1\u0102\45\0\1\u0103\50\0\1\u0104"+
    "\43\0\1\u0105\61\0\1\u0106\61\0\1\u0107\51\0\1\u0108"+
    "\42\0\1\u0109\51\0\1\u010a\51\0\1\u010b\53\0\1\u010c"+
    "\55\0\1\u010d\50\0\1\u010e\57\0\1\u010f\60\0\1\u0110"+
    "\34\0\1\u0111\4\0\1\u0112\60\0\1\u0113\53\0\1\u0114"+
    "\46\0\1\u0115\51\0\1\u0116\44\0\1\u0117\75\0\1\u0118"+
    "\26\0\1\u0119\66\0\1\u011a\61\0\1\u011b\35\0\1\u011c"+
    "\60\0\1\u011d\46\0\1\u011e\44\0\1\u011f\70\0\1\u0120"+
    "\32\0\1\u0121\13\0\1\u0122\44\0\1\u0123\51\0\1\u0124"+
    "\54\0\1\u0125\45\0\1\u0126\51\0\1\u0127\63\0\1\u0128"+
    "\46\0\1\u0129\53\0\1\u012a\63\0\1\u012b\33\0\1\u012c"+
    "\56\0\1\u012d\47\0\1\u012e\67\0\1\u012f\46\0\1\u0130"+
    "\50\0\1\u0131\67\0\1\u0132\24\0\1\u0133\102\0\1\u0134"+
    "\41\0\1\u0135\44\0\1\u0136\54\0\1\u0137\45\0\1\u0138"+
    "\44\0\1\u0139\60\0\1\u013a\51\0\1\u013b\75\0\1\u013c"+
    "\24\0\1\u013d\70\0\1\u013e\40\0\1\u013f\51\0\1\u0140"+
    "\53\0\1\u0141\62\0\1\u0142\42\0\1\u0143\52\0\1\u0144"+
    "\71\0\1\u0145\25\0\1\u0146\54\0\1\u0147\55\0\1\u0148"+
    "\54\0\1\u0149\41\0\1\u014a\62\0\1\u014b\4\0\1\u014c"+
    "\35\0\1\u014d\61\0\1\u014e\43\0\1\u014f\53\0\1\u0150"+
    "\103\0\1\u0151\45\0\1\u0152\42\0\1\u0153\46\0\1\u0154"+
    "\51\0\1\u0155\74\0\1\u0156\32\0\1\u0157\47\0\1\u0158"+
    "\53\0\1\u0159\74\0\1\u015a\45\0\1\u015b\4\0\1\u015c"+
    "\25\0\1\u015d\47\0\1\u015e\102\0\1\u015f\23\0\1\u0160"+
    "\47\0\1\u0161\55\0\1\u0162\101\0\1\u0163\36\0\1\u0164"+
    "\66\0\1\u0165\27\0\1\u0166\51\0\1\u0167\46\0\1\u0168"+
    "\53\0\1\u0169\64\0\1\u016a\46\0\1\u016b\73\0\1\u016c"+
    "\36\0\1\u016d\63\0\1\u016e\27\0\1\u016f\70\0\1\u0170"+
    "\45\0\1\u0171\46\0\1\u0172\45\0\1\u0173\53\0\1\u0174"+
    "\54\0\1\u0175\50\0\1\u0176\51\0\1\u0177\51\0\1\u0178"+
    "\56\0\1\u0179\54\0\1\u017a\46\0\1\u017b\3\0\1\u017c"+
    "\4\0\1\u017d\3\0\1\u017e\36\0\1\u017f\71\0\1\u0180"+
    "\32\0\1\u0181\51\0\1\u0182\70\0\1\u0183\32\0\1\u0184"+
    "\72\0\1\u0185\33\0\1\u0186\54\0\1\u0187\51\0\1\u0188"+
    "\52\0\1\u0189\56\0\1\u018a\46\0\1\u018b\75\0\1\u018c"+
    "\40\0\1\u018d\46\0\1\u018e\70\0\1\u018f\27\0\1\u0190"+
    "\50\0\1\u0191\75\0\1\u0192\35\0\1\u0193\61\0\1\u0194"+
    "\55\0\1\u0195\34\0\1\u0196\73\0\1\u0197\33\0\1\u0198"+
    "\66\0\1\u0199\34\0\1\u019a\73\0\1\u019b\4\0\1\u019c"+
    "\30\0\1\u019d\50\0\1\u019e\63\0\1\u019f\41\0\1\u01a0"+
    "\54\0\1\u01a1\60\0\1\u01a2\42\0\1\u01a3\55\0\1\u01a4"+
    "\66\0\1\u01a5\25\0\1\u01a6\62\0\1\u01a7\61\0\1\u01a8"+
    "\41\0\1\u01a9\51\0\1\u01aa\47\0\1\u01ab\102\0\1\u01ac"+
    "\31\0\1\u01ad\57\0\1\u01ae\52\0\1\u01af\44\0\1\u01b0"+
    "\74\0\1\u01b1\22\0\1\u01b2\50\0\1\u01b3\61\0\1\u01b4"+
    "\55\0\1\u01b5\72\0\1\u01b6\23\0\1\u01b7\65\0\1\u01b8"+
    "\66\0\1\u01b9\31\0\1\u01ba\57\0\1\u01bb\41\0\1\u01bc"+
    "\63\0\1\u01bd\46\0\1\u01be\52\0\1\u01bf\42\0\1\u01c0"+
    "\53\0\1\u01c1\65\0\1\u01c2\44\0\1\u01c3\51\0\1\u01c4"+
    "\45\0\1\u01c5\102\0\1\u01c6\36\0\1\u01c7\47\0\1\u01c8"+
    "\54\0\1\u01c9\43\0\1\u01ca\54\0\1\u01cb\52\0\1\u01cc"+
    "\71\0\1\u01cd\30\0\1\u01ce\50\0\1\u01cf\57\0\1\u01d0"+
    "\51\0\1\u01d1\75\0\1\u01d2\41\0\1\u01d3\36\0\1\u01d4"+
    "\62\0\1\u01d5\40\0\1\u01d6\67\0\1\u01d7\42\0\1\u01d8"+
    "\50\0\1\u01d9\50\0\1\u01da\51\0\1\u01db\70\0\1\u01dc"+
    "\52\0\1\u01dd\33\0\1\u01de\52\0\1\u01df\53\0\1\u01e0"+
    "\101\0\1\u01e1\52\0\1\u01e2\22\0\1\u01e3\61\0\1\u01e4"+
    "\44\0\1\u01e5\101\0\1\u01e6\20\0\1\u01e7\63\0\1\u01e8"+
    "\73\0\1\u01e9\40\0\1\u01ea\64\0\1\u01eb\24\0\1\u01ec"+
    "\46\0\1\u01ed\77\0\1\u01ee\52\0\1\u01ef\36\0\1\u01f0"+
    "\10\0\1\u01f1\30\0\1\u01f2\60\0\1\u01f3\62\0\1\u01f4"+
    "\36\0\1\u01f5\65\0\1\u01f6\67\0\1\u01f7\32\0\1\u01f8"+
    "\47\0\1\u01f9\45\0\1\u01fa\50\0\1\u01fb\62\0\1\u01fc"+
    "\52\0\1\u01fd\50\0\1\u01fe\46\0\1\u01ff\72\0\1\u0200"+
    "\35\0\1\u0201\55\0\1\u0202\61\0\1\u0203\35\0\1\u0204"+
    "\61\0\1\u0205\57\0\1\u0206\44\0\1\u0207\64\0\1\u0208"+
    "\55\0\1\u0209\37\0\1\u020a\47\0\1\u020b\55\0\1\u020c"+
    "\57\0\1\u020d\43\0\1\u020e\64\0\1\u020f\46\0\1\u0210"+
    "\63\0\1\u0211\31\0\1\u0212\73\0\1\u0213\45\0\1\u0214"+
    "\51\0\1\u0215\35\0\1\u0216\54\0\1\u0217\66\0\1\u0218"+
    "\37\0\1\u0219\52\0\1\u021a\47\0\1\u021b\54\0\1\u021c"+
    "\54\0\1\u021d\50\0\1\u021e\53\0\1\u021f\55\0\1\u0220"+
    "\46\0\1\u0221\54\0\1\u0222\67\0\1\u0223\52\0\1\u0224"+
    "\35\0\1\u0225\46\0\1\u0226\52\0\1\u0227\67\0\1\u0228"+
    "\43\0\1\u0229\42\0\1\u022a\75\0\1\u022b\30\0\1\u022c"+
    "\101\0\1\u022d\24\0\1\u022e\63\0\1\u022f\45\0\1\u0230"+
    "\52\0\1\u0231\44\0\1\u0232\54\0\1\u0233\73\0\1\u0234"+
    "\52\0\1\u0235\52\0\1\u0236\27\0\1\u0237\54\0\1\u0238"+
    "\50\0\1\u0239\66\0\1\u023a\61\0\1\u023b\46\0\1\u023c"+
    "\35\0\1\u023d\53\0\1\u023e\47\0\1\u023f\57\0\1\u0240"+
    "\45\0\1\u0241\65\0\1\u0242\56\0\1\u0243\33\0\1\u0244"+
    "\52\0\1\u0245\62\0\1\u0246\42\0\1\u0247\52\0\1\u0248"+
    "\52\0\1\u0249\57\0\1\u024a\43\0\1\u024b\54\0\1\u024c"+
    "\65\0\1\u024d\37\0\1\u024e\52\0\1\u024f\53\0\1\u0250"+
    "\47\0\1\u0251\54\0\1\u0252\54\0\1\u0253\50\0\1\u0254"+
    "\100\0\1\u0255\22\0\1\u0256\70\0\1\u0257\34\0\1\u0258"+
    "\62\0\1\u0259\50\0\1\u025a\50\0\1\u025b\63\0\1\u025c"+
    "\67\0\1\u025d\22\0\1\u025e\75\0\1\u025f\34\0\1\u0260"+
    "\60\0\1\u0261\35\0\1\u0262\67\0\1\u0263\45\0\1\u0264"+
    "\44\0\1\u0265\72\0\1\u0266\45\0\1\u0267\44\0\1\u0268"+
    "\53\0\1\u0269\67\0\1\u026a\34\0\1\u026b\60\0\1\u026c"+
    "\57\0\1\u026d\37\0\1\u026e\47\0\1\u026f\55\0\1\u0270"+
    "\43\0\1\u0271\70\0\1\u0272\44\0\1\u0273\67\0\1\u0274"+
    "\25\0\1\u0275\70\0\1\u0276\34\0\1\u0277\61\0\1\u0278"+
    "\51\0\1\u0279\71\0\1\u027a\25\0\1\u027b\56\0\1\u027c"+
    "\55\0\1\u027d\70\0\1\u027e\43\0\1\u027f\61\0\1\u0280"+
    "\52\0\1\u0281\27\0\1\u0282\100\0\1\u0283\40\0\1\u0284"+
    "\42\0\1\u0285\53\0\1\u0286\61\0\1\u0287\61\0\1\u0288"+
    "\43\0\1\u0289\61\0\1\u028a\31\0\1\u028b\64\0\1\u028c"+
    "\36\0\1\u028d\75\0\1\u028e\54\0\1\u028f\40\0\1\u0290"+
    "\62\0\1\u0291\52\0\1\u0292\37\0\1\u0293\65\0\1\u0294"+
    "\52\0\1\u0295\52\0\1\u0296\27\0\1\u0297\75\0\1\u0298"+
    "\25\0\1\u0299\104\0\1\u029a\20\0\1\u029b\73\0\1\u029c"+
    "\46\0\1\u029d\44\0\1\u029e\55\0\1\u029f\56\0\1\u02a0"+
    "\44\0\1\u02a1\42\0\1\u02a2\77\0\1\u02a3\31\0\1\u02a4"+
    "\73\0\1\u02a5\34\0\1\u02a6\61\0\1\u02a7\43\0\1\u02a8"+
    "\70\0\1\u02a9\52\0\1\u02aa\55\0\1\u02ab\47\0\1\u02ac"+
    "\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25886];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\20\1\4\11\2\1\2\0"+
    "\1\11\2\0\17\1\16\0\14\1\22\0\12\1\21\0"+
    "\1\1\1\0\6\1\1\0\1\11\4\0\1\11\13\0"+
    "\4\1\1\11\1\0\1\11\5\0\1\11\4\0\1\11"+
    "\1\0\1\1\4\0\2\11\2\0\1\11\6\0\1\11"+
    "\11\0\1\11\6\0\2\11\5\0\1\11\17\0\2\11"+
    "\74\0\1\11\66\0\1\11\10\0\1\11\44\0\1\11"+
    "\21\0\1\11\4\0\1\11\3\0\1\11\11\0\1\11"+
    "\110\0\2\11\31\0\1\11\31\0\2\11\6\0\1\11"+
    "\10\0\3\11\4\0\1\11\43\0\1\11\12\0\1\11"+
    "\11\0\1\11\5\0\1\11\3\0\1\11\1\0\2\11"+
    "\6\0\1\11\1\0\1\11\3\0\1\11\2\0\2\11"+
    "\1\0\3\11\1\0\1\11\12\0\1\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MelodyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MelodyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 82: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 84: break;
          case 4: 
            { return CHARACTER;
            } 
            // fall through
          case 85: break;
          case 5: 
            { return OPENBRACE;
            } 
            // fall through
          case 86: break;
          case 6: 
            { return CLOSEBRACE;
            } 
            // fall through
          case 87: break;
          case 7: 
            { return EQUALS;
            } 
            // fall through
          case 88: break;
          case 8: 
            { return SEMICOLON;
            } 
            // fall through
          case 89: break;
          case 9: 
            { return IDENTIFIER;
            } 
            // fall through
          case 90: break;
          case 10: 
            { return COMMENT;
            } 
            // fall through
          case 91: break;
          case 11: 
            { return STRING;
            } 
            // fall through
          case 92: break;
          case 12: 
            { return VARIABLE;
            } 
            // fall through
          case 93: break;
          case 13: 
            { return OF;
            } 
            // fall through
          case 94: break;
          case 14: 
            { return TO;
            } 
            // fall through
          case 95: break;
          case 15: 
            { return ANY;
            } 
            // fall through
          case 96: break;
          case 16: 
            { return NOT;
            } 
            // fall through
          case 97: break;
          case 17: 
            { return LET;
            } 
            // fall through
          case 98: break;
          case 18: 
            { return OVER;
            } 
            // fall through
          case 99: break;
          case 19: 
            { return SOME;
            } 
            // fall through
          case 100: break;
          case 20: 
            { return LAZY;
            } 
            // fall through
          case 101: break;
          case 21: 
            { return AHEAD;
            } 
            // fall through
          case 102: break;
          case 22: 
            { return MATCH;
            } 
            // fall through
          case 103: break;
          case 23: 
            { return TAB;
            } 
            // fall through
          case 104: break;
          case 24: 
            { return END;
            } 
            // fall through
          case 105: break;
          case 25: 
            { return OPTION;
            } 
            // fall through
          case 106: break;
          case 26: 
            { return EITHER;
            } 
            // fall through
          case 107: break;
          case 27: 
            { return BEHIND;
            } 
            // fall through
          case 108: break;
          case 28: 
            { return FEED;
            } 
            // fall through
          case 109: break;
          case 29: 
            { return CHAR;
            } 
            // fall through
          case 110: break;
          case 30: 
            { return NULL;
            } 
            // fall through
          case 111: break;
          case 31: 
            { return WORD;
            } 
            // fall through
          case 112: break;
          case 32: 
            { return CAPTURE;
            } 
            // fall through
          case 113: break;
          case 33: 
            { return START;
            } 
            // fall through
          case 114: break;
          case 34: 
            { return SPACE;
            } 
            // fall through
          case 115: break;
          case 35: 
            { return DIGIT;
            } 
            // fall through
          case 116: break;
          case 36: 
            { return RETURN;
            } 
            // fall through
          case 117: break;
          case 37: 
            { return NEWLINE;
            } 
            // fall through
          case 118: break;
          case 38: 
            { return VERTICAL;
            } 
            // fall through
          case 119: break;
          case 39: 
            { return BOUNDARY;
            } 
            // fall through
          case 120: break;
          case 40: 
            { return BACKSPACE;
            } 
            // fall through
          case 121: break;
          case 41: 
            { return ALPHABET;
            } 
            // fall through
          case 122: break;
          case 42: 
            { return WHITESPACELITERAL;
            } 
            // fall through
          case 123: break;
          case 43: 
            { return ALPHANUMERIC;
            } 
            // fall through
          case 124: break;
          case 44: 
            { return MARK_CATEGORY;
            } 
            // fall through
          case 125: break;
          case 45: 
            { return OTHER_CATEGORY;
            } 
            // fall through
          case 126: break;
          case 46: 
            { return FORMAT_CATEGORY;
            } 
            // fall through
          case 127: break;
          case 47: 
            { return SYMBOL_CATEGORY;
            } 
            // fall through
          case 128: break;
          case 48: 
            { return NUMBER_CATEGORY;
            } 
            // fall through
          case 129: break;
          case 49: 
            { return LETTER_CATEGORY;
            } 
            // fall through
          case 130: break;
          case 50: 
            { return CONTROL_CATEGORY;
            } 
            // fall through
          case 131: break;
          case 51: 
            { return SURROGATE_CATEGORY;
            } 
            // fall through
          case 132: break;
          case 52: 
            { return SEPARATOR_CATEGORY;
            } 
            // fall through
          case 133: break;
          case 53: 
            { return UNASSIGNED_CATEGORY;
            } 
            // fall through
          case 134: break;
          case 54: 
            { return PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 135: break;
          case 55: 
            { return PRIVATE_USE_CATEGORY;
            } 
            // fall through
          case 136: break;
          case 56: 
            { return MATH_SYMBOL_CATEGORY;
            } 
            // fall through
          case 137: break;
          case 57: 
            { return OTHER_SYMBOL_CATEGORY;
            } 
            // fall through
          case 138: break;
          case 58: 
            { return OTHER_NUMBER_CATEGORY;
            } 
            // fall through
          case 139: break;
          case 59: 
            { return OTHER_LETTER_CATEGORY;
            } 
            // fall through
          case 140: break;
          case 60: 
            { return CASED_LETTER_CATEGORY;
            } 
            // fall through
          case 141: break;
          case 61: 
            { return LETTER_NUMBER_CATEGORY;
            } 
            // fall through
          case 142: break;
          case 62: 
            { return ENCLOSING_MARK_CATEGORY;
            } 
            // fall through
          case 143: break;
          case 63: 
            { return LINE_SEPARATOR_CATEGORY;
            } 
            // fall through
          case 144: break;
          case 64: 
            { return CURRENCY_SYMBOL_CATEGORY;
            } 
            // fall through
          case 145: break;
          case 65: 
            { return SPACE_SEPARATOR_CATEGORY;
            } 
            // fall through
          case 146: break;
          case 66: 
            { return MODIFIER_SYMBOL_CATEGORY;
            } 
            // fall through
          case 147: break;
          case 67: 
            { return MODIFIER_LETTER_CATEGORY;
            } 
            // fall through
          case 148: break;
          case 68: 
            { return OPEN_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 149: break;
          case 69: 
            { return TITLECASE_LETTER_CATEGORY;
            } 
            // fall through
          case 150: break;
          case 70: 
            { return UPPERCASE_LETTER_CATEGORY;
            } 
            // fall through
          case 151: break;
          case 71: 
            { return NON_SPACING_MARK_CATEGORY;
            } 
            // fall through
          case 152: break;
          case 72: 
            { return DASH_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 153: break;
          case 73: 
            { return LOWERCASE_LETTER_CATEGORY;
            } 
            // fall through
          case 154: break;
          case 74: 
            { return OTHER_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 155: break;
          case 75: 
            { return FINAL_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 156: break;
          case 76: 
            { return CLOSE_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 157: break;
          case 77: 
            { return PARAGRAPH_SEPARATOR_CATEGORY;
            } 
            // fall through
          case 158: break;
          case 78: 
            { return INITIAL_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 159: break;
          case 79: 
            { return DECIMAL_DIGIT_NUMBER_CATEGORY;
            } 
            // fall through
          case 160: break;
          case 80: 
            { return CONNECTOR_PUNCTUATION_CATEGORY;
            } 
            // fall through
          case 161: break;
          case 81: 
            { return SPACING_COMBINING_MARK_CATEGORY;
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
