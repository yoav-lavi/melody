/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.tigr.melody.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.tigr.melody.plugin.psi.MelodyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Melody.flex</tt>
 */
public class _MelodyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\11\1\6\4\11\1\7\2\0\1\5\3\0\1\13\1\4\12\3\1\0\1\50"+
    "\1\40\1\47\1\41\1\0\1\11\32\12\1\0\1\11\1\0\1\11\1\12\1\10\1\20\1\35\1\17"+
    "\1\34\1\24\1\15\1\43\1\27\1\31\1\12\1\44\1\36\1\26\1\32\1\14\1\21\1\12\1\23"+
    "\1\25\1\16\1\22\1\30\1\42\1\12\1\33\1\37\1\45\1\0\1\46\7\0\1\1\32\0\1\2\337"+
    "\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\3\1\1\4"+
    "\1\1\12\4\1\1\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\2\0\1\13\2\0\1\14\1\15\2\11\1\16"+
    "\12\11\16\0\4\11\1\17\3\11\1\20\2\11\1\21"+
    "\21\0\1\12\1\11\1\22\3\11\1\23\2\11\1\24"+
    "\20\0\1\12\1\0\2\11\1\25\1\11\1\26\1\11"+
    "\1\0\1\27\3\0\1\30\13\0\1\31\1\11\1\32"+
    "\1\33\1\34\1\35\5\0\1\36\4\0\1\37\1\0"+
    "\1\40\3\0\1\41\1\42\2\0\1\43\5\0\1\44"+
    "\10\0\1\45\5\0\1\46\1\47\4\0\1\50\2\0"+
    "\1\51\1\52\1\0\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\51\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\51\0\51"+
    "\0\51\0\51\0\u0148\0\u035d\0\u0386\0\315\0\51\0\366"+
    "\0\u011f\0\u0171\0\u0148\0\u03af\0\u03d8\0\u0148\0\u0401\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u0148\0\u087d\0\u08a6\0\u08cf\0\u0148\0\u08f8"+
    "\0\u0921\0\u0148\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17"+
    "\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f"+
    "\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0148\0\u0c55\0\u0c7e"+
    "\0\u0ca7\0\u0148\0\u0cd0\0\u0cf9\0\u0148\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0787\0\u0fb2\0\u0fdb"+
    "\0\u1004\0\u0148\0\u102d\0\u0148\0\u1056\0\u107f\0\51\0\u10a8"+
    "\0\u10d1\0\u10fa\0\51\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7"+
    "\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294\0\u0c03\0\u0148\0\u12bd"+
    "\0\u0148\0\u0148\0\51\0\51\0\u12e6\0\u130f\0\u1338\0\u1361"+
    "\0\u138a\0\51\0\u13b3\0\u13dc\0\u1405\0\u142e\0\51\0\u1457"+
    "\0\u0148\0\u1480\0\u14a9\0\u14d2\0\51\0\51\0\u14fb\0\u1524"+
    "\0\51\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\51\0\u161a"+
    "\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739\0\51"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\51\0\51\0\u182f"+
    "\0\u1858\0\u1881\0\u18aa\0\51\0\u18d3\0\u18fc\0\51\0\51"+
    "\0\u1925\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\6\1\12\1\13\1\14\1\12\1\15\1\16\1\17"+
    "\3\12\1\20\1\21\1\22\3\12\1\23\2\12\1\24"+
    "\1\25\1\12\1\26\1\2\3\12\1\27\1\30\1\31"+
    "\1\32\52\0\2\3\51\0\1\4\6\0\1\33\1\0"+
    "\24\33\2\0\3\33\10\0\1\34\1\35\43\0\6\36"+
    "\1\37\42\36\7\40\1\37\41\40\10\41\1\37\40\41"+
    "\3\0\1\33\6\0\1\33\1\0\24\33\2\0\3\33"+
    "\7\0\1\42\6\0\1\42\1\0\24\42\2\0\3\42"+
    "\7\0\1\33\6\0\1\33\1\0\1\33\1\43\3\33"+
    "\1\44\6\33\1\45\7\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\1\46\23\33\2\0\3\33\7\0"+
    "\1\33\6\0\1\33\1\0\4\33\1\47\17\33\2\0"+
    "\3\33\7\0\1\33\6\0\1\33\1\0\13\33\1\50"+
    "\2\33\1\51\5\33\2\0\3\33\7\0\1\33\6\0"+
    "\1\33\1\0\15\33\1\52\6\33\2\0\3\33\7\0"+
    "\1\33\6\0\1\33\1\0\1\53\23\33\2\0\3\33"+
    "\7\0\1\33\6\0\1\33\1\0\4\33\1\54\17\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\1\55"+
    "\23\33\2\0\3\33\7\0\1\33\6\0\1\33\1\0"+
    "\10\33\1\56\13\33\2\0\3\33\7\0\1\33\6\0"+
    "\1\33\1\0\4\33\1\57\3\33\1\60\13\33\2\0"+
    "\3\33\21\0\1\61\1\62\1\63\1\64\2\0\1\65"+
    "\1\66\1\67\2\0\1\70\1\0\1\71\1\0\1\72"+
    "\1\73\4\0\1\74\6\0\1\34\1\0\47\34\5\75"+
    "\1\76\43\75\3\0\1\33\6\0\1\33\1\0\2\33"+
    "\1\77\21\33\2\0\3\33\7\0\1\33\6\0\1\33"+
    "\1\0\10\33\1\100\13\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\5\33\1\101\16\33\2\0\3\33"+
    "\7\0\1\33\6\0\1\33\1\0\10\33\1\102\13\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\17\33"+
    "\1\103\4\33\2\0\3\33\7\0\1\33\6\0\1\33"+
    "\1\0\2\33\1\104\21\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\12\33\1\105\11\33\2\0\3\33"+
    "\7\0\1\33\6\0\1\33\1\0\2\33\1\106\21\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\2\33"+
    "\1\107\21\33\2\0\3\33\7\0\1\33\6\0\1\33"+
    "\1\0\13\33\1\110\10\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\23\33\1\111\2\0\3\33\7\0"+
    "\1\33\6\0\1\33\1\0\2\33\1\112\21\33\2\0"+
    "\3\33\30\0\1\113\44\0\1\114\57\0\1\115\57\0"+
    "\1\116\36\0\1\117\56\0\1\120\34\0\1\121\2\0"+
    "\1\122\53\0\1\123\46\0\1\124\1\0\1\125\55\0"+
    "\1\126\33\0\1\127\3\0\1\130\44\0\1\131\12\0"+
    "\1\132\21\0\5\75\1\133\47\75\1\134\1\133\43\75"+
    "\3\0\1\33\6\0\1\33\1\0\15\33\1\135\6\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\7\33"+
    "\1\136\14\33\2\0\3\33\7\0\1\33\6\0\1\33"+
    "\1\0\2\33\1\137\21\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\4\33\1\140\17\33\2\0\3\33"+
    "\7\0\1\33\6\0\1\33\1\0\13\33\1\141\10\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\10\33"+
    "\1\142\13\33\2\0\3\33\7\0\1\33\6\0\1\33"+
    "\1\0\3\33\1\143\20\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\15\33\1\144\6\33\2\0\3\33"+
    "\7\0\1\33\6\0\1\33\1\0\17\33\1\145\4\33"+
    "\2\0\3\33\30\0\1\146\61\0\1\147\33\0\1\150"+
    "\51\0\1\151\45\0\1\152\66\0\1\153\34\0\1\154"+
    "\50\0\1\155\53\0\1\156\63\0\1\157\54\0\1\160"+
    "\51\0\1\161\27\0\1\162\45\0\1\163\54\0\1\164"+
    "\56\0\1\165\17\0\4\75\1\166\1\133\50\75\1\167"+
    "\43\75\3\0\1\33\6\0\1\33\1\0\1\170\23\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\6\33"+
    "\1\171\15\33\2\0\3\33\7\0\1\33\6\0\1\33"+
    "\1\0\20\33\1\172\3\33\2\0\3\33\7\0\1\33"+
    "\6\0\1\33\1\0\10\33\1\173\13\33\2\0\3\33"+
    "\7\0\1\33\6\0\1\33\1\0\13\33\1\174\10\33"+
    "\2\0\3\33\7\0\1\33\6\0\1\33\1\0\16\33"+
    "\1\175\5\33\2\0\3\33\40\0\1\176\55\0\1\177"+
    "\32\0\1\200\54\0\1\201\43\0\1\202\67\0\1\203"+
    "\32\0\1\204\44\0\1\205\47\0\1\206\70\0\1\207"+
    "\50\0\1\210\43\0\1\211\51\0\1\212\62\0\1\213"+
    "\40\0\1\214\32\0\1\215\32\0\4\75\1\216\1\133"+
    "\43\75\3\0\1\33\6\0\1\33\1\0\16\33\1\217"+
    "\5\33\2\0\3\33\7\0\1\33\6\0\1\33\1\0"+
    "\7\33\1\220\14\33\2\0\3\33\7\0\1\33\6\0"+
    "\1\33\1\0\7\33\1\221\14\33\2\0\3\33\7\0"+
    "\1\33\6\0\1\33\1\0\20\33\1\222\3\33\2\0"+
    "\3\33\45\0\1\223\50\0\1\224\27\0\1\225\53\0"+
    "\1\226\43\0\1\227\56\0\1\230\55\0\1\231\60\0"+
    "\1\232\40\0\1\233\35\0\1\234\66\0\1\235\41\0"+
    "\1\236\64\0\1\237\33\0\1\240\27\0\1\33\6\0"+
    "\1\33\1\0\10\33\1\241\13\33\2\0\3\33\36\0"+
    "\1\242\2\0\1\243\45\0\1\244\57\0\1\245\50\0"+
    "\1\246\26\0\1\247\63\0\1\250\57\0\1\251\27\0"+
    "\1\252\51\0\1\253\54\0\1\254\45\0\1\255\52\0"+
    "\1\256\65\0\1\257\27\0\1\260\54\0\1\261\47\0"+
    "\1\262\45\0\1\263\51\0\1\264\55\0\1\265\40\0"+
    "\1\266\70\0\1\267\53\0\1\270\42\0\1\271\34\0"+
    "\1\272\51\0\1\273\54\0\1\274\55\0\1\275\60\0"+
    "\1\276\50\0\1\277\33\0\1\300\43\0\1\301\54\0"+
    "\1\302\44\0\1\303\72\0\1\304\33\0\1\305\55\0"+
    "\1\306\60\0\1\307\50\0\1\310\26\0\1\311\72\0"+
    "\1\312\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\20\1\4\11\2\1\2\0"+
    "\1\11\2\0\17\1\16\0\14\1\21\0\12\1\20\0"+
    "\1\1\1\0\6\1\1\0\1\11\3\0\1\11\13\0"+
    "\4\1\2\11\5\0\1\11\4\0\1\11\1\0\1\1"+
    "\3\0\2\11\2\0\1\11\5\0\1\11\10\0\1\11"+
    "\5\0\2\11\4\0\1\11\2\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MelodyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MelodyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 44: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 46: break;
          case 4: 
            { return CHARACTER;
            } 
            // fall through
          case 47: break;
          case 5: 
            { return OPENBRACE;
            } 
            // fall through
          case 48: break;
          case 6: 
            { return CLOSEBRACE;
            } 
            // fall through
          case 49: break;
          case 7: 
            { return EQUALS;
            } 
            // fall through
          case 50: break;
          case 8: 
            { return SEMICOLON;
            } 
            // fall through
          case 51: break;
          case 9: 
            { return IDENTIFIER;
            } 
            // fall through
          case 52: break;
          case 10: 
            { return COMMENT;
            } 
            // fall through
          case 53: break;
          case 11: 
            { return STRING;
            } 
            // fall through
          case 54: break;
          case 12: 
            { return VARIABLE;
            } 
            // fall through
          case 55: break;
          case 13: 
            { return OF;
            } 
            // fall through
          case 56: break;
          case 14: 
            { return TO;
            } 
            // fall through
          case 57: break;
          case 15: 
            { return ANY;
            } 
            // fall through
          case 58: break;
          case 16: 
            { return NOT;
            } 
            // fall through
          case 59: break;
          case 17: 
            { return LET;
            } 
            // fall through
          case 60: break;
          case 18: 
            { return OVER;
            } 
            // fall through
          case 61: break;
          case 19: 
            { return SOME;
            } 
            // fall through
          case 62: break;
          case 20: 
            { return LAZY;
            } 
            // fall through
          case 63: break;
          case 21: 
            { return AHEAD;
            } 
            // fall through
          case 64: break;
          case 22: 
            { return MATCH;
            } 
            // fall through
          case 65: break;
          case 23: 
            { return TAB;
            } 
            // fall through
          case 66: break;
          case 24: 
            { return END;
            } 
            // fall through
          case 67: break;
          case 25: 
            { return OPTION;
            } 
            // fall through
          case 68: break;
          case 26: 
            { return EITHER;
            } 
            // fall through
          case 69: break;
          case 27: 
            { return BEHIND;
            } 
            // fall through
          case 70: break;
          case 28: 
            { return FEED;
            } 
            // fall through
          case 71: break;
          case 29: 
            { return CHAR;
            } 
            // fall through
          case 72: break;
          case 30: 
            { return NULL;
            } 
            // fall through
          case 73: break;
          case 31: 
            { return WORD;
            } 
            // fall through
          case 74: break;
          case 32: 
            { return CAPTURE;
            } 
            // fall through
          case 75: break;
          case 33: 
            { return START;
            } 
            // fall through
          case 76: break;
          case 34: 
            { return SPACE;
            } 
            // fall through
          case 77: break;
          case 35: 
            { return DIGIT;
            } 
            // fall through
          case 78: break;
          case 36: 
            { return RETURN;
            } 
            // fall through
          case 79: break;
          case 37: 
            { return NEWLINE;
            } 
            // fall through
          case 80: break;
          case 38: 
            { return VERTICAL;
            } 
            // fall through
          case 81: break;
          case 39: 
            { return BOUNDARY;
            } 
            // fall through
          case 82: break;
          case 40: 
            { return BACKSPACE;
            } 
            // fall through
          case 83: break;
          case 41: 
            { return ALPHABET;
            } 
            // fall through
          case 84: break;
          case 42: 
            { return WHITESPACELITERAL;
            } 
            // fall through
          case 85: break;
          case 43: 
            { return ALPHANUMERIC;
            } 
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
