/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.tigr.melody.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.tigr.melody.plugin.psi.MelodyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Melody.flex</tt>
 */
public class _MelodyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 7712 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\34\12\1\15\1\16"+
    "\24\12\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\12\1\30\20\12\1\31\31"+
    "\12\1\32\1\33\4\12\1\34\1\12\1\35\u03c3\12");

  /* The ZZ_CMAP_Y table has 1920 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6\1\1\1\7\1\10\132\1\1\11\10\1\1\11\14\1\1"+
    "\11\31\1\1\12\7\1\1\12\1\13\6\1\1\12\7\1\1\12\7\1\1\12\1\14\6\1\1\12\1\15"+
    "\6\1\1\12\1\16\6\1\1\12\6\1\1\16\1\12\1\17\6\1\1\12\6\1\1\11\7\1\1\11\4\1"+
    "\1\20\1\21\20\1\1\11\4\1\1\11\54\1\1\22\1\23\60\1\1\7\5\1\1\24\1\25\16\1\2"+
    "\11\1\1\1\11\22\1\1\12\10\1\1\26\12\1\2\11\13\1\1\11\5\1\1\11\10\1\2\11\72"+
    "\1\1\27\1\1\1\30\2\1\1\31\1\1\1\32\1\11\14\1\3\20\1\33\55\1\3\20\1\34\4\1"+
    "\1\35\1\20\47\1\1\12\1\20\1\21\125\1\1\36\60\1\1\37\1\1\1\40\1\41\25\1\1\42"+
    "\10\1\1\11\1\1\1\43\1\44\2\1\1\11\2\1\1\44\66\1\1\11\13\1\1\12\24\1\1\45\11"+
    "\1\1\11\2\1\1\11\14\1\1\11\1\1\1\11\5\1\1\11\31\1\1\11\61\1\1\11\36\1\1\46"+
    "\2\20\1\21\3\20\1\17\1\47\25\1\1\44\1\34\2\1\1\21\1\1\1\50\10\1\1\51\14\1"+
    "\1\11\72\1\1\43\1\1\1\22\2\1\1\46\4\1\1\52\1\1\1\53\11\1\1\54\1\20\1\55\2"+
    "\20\4\1\1\56\2\1\1\57\1\1\1\60\4\1\1\52\6\1\1\43\1\1\1\43\2\1\1\22\24\1\1"+
    "\35\26\1\1\20\1\61\35\1\1\55\1\20\10\1\1\11\3\1\1\12\11\1\1\11\1\44\1\62\17"+
    "\1\1\11\25\1\1\11\7\1\1\11\27\1\1\11\6\1\1\11\6\1\1\34\32\1\1\20\1\15\65\1"+
    "\1\20\1\23\71\1\6\20\1\61\137\1\1\11\16\1\1\63\1\64\77\1\1\20\1\64\104\1\1"+
    "\24\3\20\14\1\1\46\10\1\1\11\72\1\1\23\57\1");

  /* The ZZ_CMAP_A table has 848 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\5\4\0\1\6\7\0\1\4\12\3\1\0\1\41\1\32\1\0\1\33"+
    "\1\0\1\7\1\14\1\31\1\13\1\30\1\20\1\11\1\36\1\23\1\25\2\0\1\35\1\22\1\26\1"+
    "\10\1\15\1\0\1\17\1\21\1\12\1\16\1\24\1\34\1\0\1\27\1\0\1\37\1\0\1\40\7\0"+
    "\1\1\12\0\1\2\21\0\2\3\5\0\1\3\2\0\3\3\1\0\12\3\14\0\12\3\4\0\6\3\10\0\6\3"+
    "\10\0\3\3\25\0\7\3\1\0\11\3\7\0\24\3\25\0\24\3\21\0\3\3\17\0\13\3\5\0\13\2"+
    "\15\0\2\1\5\0\1\2\17\0\1\2\1\3\3\0\6\3\6\0\3\3\2\0\5\3\6\0\14\3\16\0\6\3\15"+
    "\0\1\3\2\0\1\2\6\0\1\3\11\0\11\3\16\0\3\3\7\0\4\3\22\0\10\3\1\0\25\3\21\0"+
    "\11\3\12\0\2\3\5\0\1\3\10\0\1\3\6\0\5\3\25\0\5\3\6\0\6\3\20\0\2\3\4\0\26\3"+
    "\25\0\2\3\16\0\22\3\1\0\5\3\13\0\12\3\1\0\7\3\16\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\16\2\1\4\1\5\1\6"+
    "\1\7\1\0\1\10\2\0\1\11\2\0\1\12\27\0"+
    "\1\13\3\0\1\14\20\0\1\15\3\0\1\16\22\0"+
    "\1\17\1\0\1\20\2\0\1\21\3\0\1\22\10\0"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\5\0\1\30"+
    "\2\0\1\31\1\0\1\32\2\0\1\33\1\34\2\0"+
    "\1\35\2\0\1\36\5\0\1\37\1\0\1\40\1\41"+
    "\2\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\42\0\42\0\42\0\u0264\0\252\0\42"+
    "\0\314\0\356\0\42\0\u0286\0\u02a8\0\42\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\42\0\u05d8\0\u05fa"+
    "\0\u061c\0\42\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8"+
    "\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8"+
    "\0\u081a\0\u083c\0\42\0\u085e\0\u0880\0\u08a2\0\42\0\u08c4"+
    "\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4"+
    "\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4"+
    "\0\u0b06\0\42\0\u0b28\0\42\0\u0b4a\0\u0b6c\0\42\0\u0b8e"+
    "\0\u0bb0\0\u0bd2\0\42\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\42\0\u0d04\0\42\0\42\0\42"+
    "\0\42\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\42\0\u0dd0"+
    "\0\u0df2\0\42\0\u0e14\0\42\0\u0e36\0\u0e58\0\42\0\42"+
    "\0\u0e7a\0\u0e9c\0\42\0\u0ebe\0\u0ee0\0\42\0\u0f02\0\u0f24"+
    "\0\u0f46\0\u0f68\0\u0f8a\0\42\0\u0fac\0\42\0\42\0\u0fce"+
    "\0\u0ff0\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\3\2\1\15\1\16\1\17"+
    "\3\2\1\20\2\2\1\21\1\22\4\2\1\23\1\24"+
    "\1\25\43\0\2\3\42\0\1\4\42\0\1\26\35\0"+
    "\5\27\1\30\34\27\6\31\1\30\33\31\7\32\1\30"+
    "\32\32\11\0\1\33\3\0\1\34\6\0\1\35\25\0"+
    "\1\36\45\0\1\37\50\0\1\40\2\0\1\41\40\0"+
    "\1\42\24\0\1\43\45\0\1\44\35\0\1\45\51\0"+
    "\1\46\32\0\1\47\1\50\1\51\1\52\2\0\1\53"+
    "\1\54\1\55\2\0\1\56\1\0\1\57\1\0\1\60"+
    "\3\0\1\61\5\0\1\26\1\0\40\26\12\0\1\62"+
    "\47\0\1\63\36\0\1\64\44\0\1\65\50\0\1\66"+
    "\24\0\1\67\51\0\1\70\31\0\1\71\41\0\1\72"+
    "\52\0\1\73\36\0\1\74\35\0\1\75\50\0\1\76"+
    "\53\0\1\77\24\0\1\100\47\0\1\101\25\0\1\102"+
    "\2\0\1\103\44\0\1\104\37\0\1\105\1\0\1\106"+
    "\46\0\1\107\24\0\1\110\12\0\1\111\43\0\1\112"+
    "\33\0\1\113\34\0\1\114\43\0\1\115\50\0\1\116"+
    "\36\0\1\117\34\0\1\120\53\0\1\121\34\0\1\122"+
    "\52\0\1\123\24\0\1\124\42\0\1\125\36\0\1\126"+
    "\57\0\1\127\25\0\1\130\41\0\1\131\44\0\1\132"+
    "\57\0\1\133\40\0\1\134\43\0\1\135\22\0\1\136"+
    "\47\0\1\137\24\0\1\140\47\0\1\141\53\0\1\142"+
    "\31\0\1\143\44\0\1\144\44\0\1\145\43\0\1\146"+
    "\44\0\1\147\25\0\1\150\45\0\1\151\34\0\1\152"+
    "\56\0\1\153\25\0\1\154\35\0\1\155\40\0\1\156"+
    "\64\0\1\157\41\0\1\160\31\0\1\161\44\0\1\162"+
    "\23\0\1\163\55\0\1\164\32\0\1\165\41\0\1\166"+
    "\52\0\1\167\44\0\1\170\41\0\1\171\22\0\1\172"+
    "\44\0\1\173\34\0\1\174\47\0\1\175\46\0\1\176"+
    "\47\0\1\177\33\0\1\200\26\0\1\201\62\0\1\202"+
    "\26\0\1\203\41\0\1\204\52\0\1\205\36\0\1\206"+
    "\46\0\1\207\41\0\1\210\21\0\1\211\54\0\1\212"+
    "\46\0\1\213\27\0\1\214\40\0\1\215\54\0\1\216"+
    "\22\0\1\217\45\0\1\220\36\0\1\221\36\0\1\222"+
    "\64\0\1\223\37\0\1\224\22\0\1\225\60\0\1\226"+
    "\41\0\1\227\21\0\1\230\46\0\1\231\54\0\1\232"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4114];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\20\1\3\11\1\1\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\27\0\1\11\3\0\1\11\20\0"+
    "\1\11\3\0\1\11\22\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\10\0\1\11\1\0\4\11\5\0"+
    "\1\11\2\0\1\11\1\0\1\11\2\0\2\11\2\0"+
    "\1\11\2\0\1\11\5\0\1\11\1\0\2\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MelodyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MelodyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NUMBER;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 36: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return OPENBRACE;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return CLOSEBRACE;
            } 
            // fall through
          case 39: break;
          case 6: 
            { return SEMICOLON;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return STRING;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return OF;
            } 
            // fall through
          case 43: break;
          case 10: 
            { return TO;
            } 
            // fall through
          case 44: break;
          case 11: 
            { return ANY;
            } 
            // fall through
          case 45: break;
          case 12: 
            { return NOT;
            } 
            // fall through
          case 46: break;
          case 13: 
            { return OVER;
            } 
            // fall through
          case 47: break;
          case 14: 
            { return SOME;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return AHEAD;
            } 
            // fall through
          case 49: break;
          case 16: 
            { return MATCH;
            } 
            // fall through
          case 50: break;
          case 17: 
            { return TAB;
            } 
            // fall through
          case 51: break;
          case 18: 
            { return END;
            } 
            // fall through
          case 52: break;
          case 19: 
            { return OPTION;
            } 
            // fall through
          case 53: break;
          case 20: 
            { return EITHER;
            } 
            // fall through
          case 54: break;
          case 21: 
            { return BEHIND;
            } 
            // fall through
          case 55: break;
          case 22: 
            { return FEED;
            } 
            // fall through
          case 56: break;
          case 23: 
            { return CHAR;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return NULL;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return WORD;
            } 
            // fall through
          case 59: break;
          case 26: 
            { return CAPTURE;
            } 
            // fall through
          case 60: break;
          case 27: 
            { return START;
            } 
            // fall through
          case 61: break;
          case 28: 
            { return SPACE;
            } 
            // fall through
          case 62: break;
          case 29: 
            { return DIGIT;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return RETURN;
            } 
            // fall through
          case 64: break;
          case 31: 
            { return NEWLINE;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return ALPHABET;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return VERTICAL;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return WHITESPACELITERAL;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
